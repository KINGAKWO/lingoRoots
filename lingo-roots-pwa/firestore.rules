rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to get user role from Firestore (can be adapted for claims if needed)
    function getUserRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }

    // User documents
    match /users/{userId} {
      // User progress subcollection
      match /userProgress/{document=**} {
        // Learners can read and write their own progress.
        allow read, write: if request.auth.uid == userId && getUserRole(request.auth.uid) == 'learner';
      }

      // Users can read their own document. Admins can read any user document.
      allow read: if request.auth.uid == userId || getUserRole(request.auth.uid) == 'admin';

      
      // Users can create their own document upon signup.
      allow create: if request.auth.uid == userId;

      // Users can update their own document, BUT NOT their role.
      // Admins can update any field in any user document, including the role.
      allow update: if request.auth.uid == userId && !(request.resource.data.role != resource.data.role) || 
                       getUserRole(request.auth.uid) == 'admin';
                       
      // Admins can delete users (consider soft delete for data recovery).
      allow delete: if getUserRole(request.auth.uid) == 'admin';
    }

    // Languages collection
    match /languages/{languageId} {
      // Allow reading the language document itself (e.g., for language metadata)
      allow read: if request.auth != null && getUserRole(request.auth.uid) == 'learner';

      // Lessons subcollection
      match /lessons/{lessonId} {
        // Learners can read lessons.
        allow read: if request.auth != null && getUserRole(request.auth.uid) == 'learner';
        
        // Content Creators and Admins can create, update, and delete lessons.
        // Assumes a 'createdBy' field in lesson documents for ownership checks.
        allow create: if request.auth != null && 
                         (getUserRole(request.auth.uid) == 'contentCreator' || 
                          getUserRole(request.auth.uid) == 'admin');
        allow update: if request.auth != null && 
                         ((getUserRole(request.auth.uid) == 'contentCreator' && resource.data.createdBy == request.auth.uid) || 
                          getUserRole(request.auth.uid) == 'admin');
        allow delete: if request.auth != null && 
                         ((getUserRole(request.auth.uid) == 'contentCreator' && resource.data.createdBy == request.auth.uid) || 
                          getUserRole(request.auth.uid) == 'admin');
      }

      // Quizzes subcollection
      match /quizzes/{quizId} {
        // Learners can read quizzes.
        allow read: if request.auth != null && getUserRole(request.auth.uid) == 'learner';
        allow create, update, delete: if request.auth != null && 
                                       (getUserRole(request.auth.uid) == 'contentCreator' || 
                                        getUserRole(request.auth.uid) == 'admin');
      }
      
      // Other subcollections within a language (e.g., vocabulary, grammar_rules)
      // Add specific rules as needed, following a similar pattern.
      // match /{otherCollection}/{documentId} {
      //   allow read: if ... ;
      //   allow write: if ... ;
      // }
    }

    // Admin-specific collections (e.g., /adminAnalytics, /siteConfiguration)
    match /adminOnly/{document=**} {
      allow read, write, delete: if getUserRole(request.auth.uid) == 'admin';
    }

    // Default deny for any other paths not explicitly matched
    match /{path=**} {
      allow read, write: if false;
    }
  }
}